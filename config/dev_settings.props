<?xml version="1.0" encoding="Windows-1252"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--A .props file that is meant to have paths/definitions afferent to codebases in their 
  developement phase, so  that we can switch relatively easily between compiling against 
  developement or stable versions.-->
  <PropertyGroup>
    <!--DependenciesType is a way to switch context in terms of the dependencies against which to compile or link.-->
    <DependenciesType Condition="'$(DependenciesType)'==''">Stable</DependenciesType>
  </PropertyGroup>
  <!--if you wish to compile against the stable versions of the header files and DLLs:-->
  <PropertyGroup Condition="'$(DependenciesType)'=='Stable'">
    <LocalIncludePaths></LocalIncludePaths>
  </PropertyGroup>
  <!--if you wish to co-develop your project and its dependencies: -->
  <PropertyGroup Condition="'$(DependenciesType)'=='Source'">
    <!-- <GitHubJm>C:/src/github_jm</GitHubJm> -->
    <GitHubJm>C:/src</GitHubJm>
    <CcppInteropSrcPath>$(GitHubJm)/c-interop</CcppInteropSrcPath>
    <!-- <CorporateSrcPath Condition="'$(CorporateSrcPath)'==''">C:/src/csiro/stash</CorporateSrcPath> -->
    <CorporateSrcPath Condition="'$(CorporateSrcPath)'==''">C:/src</CorporateSrcPath>
    <SfslSrcPath>$(CorporateSrcPath)/numerical-sl-cpp</SfslSrcPath>
    <!--Initialize the LocalIncludePaths macro with paths to developement headers, so that they
    appear before stable ones, if any.-->
    <LocalIncludePaths>$(SfslSrcPath)/math/include;$(SfslSrcPath)/algorithm/include;$(GitHubJm)/config-utils/catch/include;$(CcppInteropSrcPath)/include;$(GitHubJm)/moirai/include;$(GitHubJm)/wila/include;$(CorporateSrcPath)/datatypes/include;$(CorporateSrcPath)/rpp-cpp/include;$(GitHubJm)/yaml-cpp/include;$(GitHubJm)/jsoncpp/include;$(CorporateSrcPath)/swift/libswift/include</LocalIncludePaths>

    <!--You may predefine LocalLibraryPaths here, before it is appended to, but should be as a last resort.-->
    <!--<LocalLibraryPaths>c:/path/to/build/output/Release/x64</LocalLibraryPaths>-->

    <!--Properties in a PropertyGroup are evaluated first, so we cannot 
create evaluation-time properties based on the content of an itemgroup. See
  https://msdn.microsoft.com/en-us/library/dd997067.aspx#Property%20and%20Item%20Evaluation%20Order
  -->
    <!--As a workaround we allow for up to 9 additional root folders to look into for build outputs of dependency libraries:-->
    <BuildOutputPath_1>$(CorporateSrcPath)/datatypes/Solutions</BuildOutputPath_1>
    <BuildOutputPath_2>$(GitHubJm)/jsoncpp/solution</BuildOutputPath_2>
    <BuildOutputPath_3>$(GitHubJm)/yaml-cpp/vsproj</BuildOutputPath_3>
    <BuildOutputPath_4>$(GitHubJm)/moirai/tests</BuildOutputPath_4>
    <BuildOutputPath_5>$(CorporateSrcPath)/swift/Solutions/SWIFT</BuildOutputPath_5>
    <!--
    <BuildOutputPath_6></BuildOutputPath_6>
    <BuildOutputPath_7></BuildOutputPath_7>
    <BuildOutputPath_8></BuildOutputPath_8>
    <BuildOutputPath_9></BuildOutputPath_9>
    -->
  </PropertyGroup>
  <!--<ItemGroup>
    <SrcOutLocation Include="datatypes">
      <BuildOutPath>C:/src/corporationname/stash/per202/datatypes/Solutions</BuildOutPath>
    </SrcOutLocation >
    <SrcOutLocation Include="YoYo">
      <BuildOutPath></BuildOutPath>
    </SrcOutLocation >
  </ItemGroup>-->
  <!--<ItemGroup>
    <SrcOutLocation Include="C:/src/corporationname/stash/per202/datatypes/Solutions;C:/src/corporationname/stash/per202/YoYo/Solutions"/>
  </ItemGroup>-->
</Project>